from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import asyncio

from modules.web_security import (
    ApplicationWalker,
    ContentDiscovery,
    SubdomainEnumerator,
    AuthBypass,
    IDORDetector,
    FileInclusionScanner,
    SSRFDetector,
    XSSScanner,
    RaceConditionTester,
    CommandInjectionTester,
    SQLInjectionScanner
)

router = APIRouter()

# Request/Response models
class ScanRequest(BaseModel):
    target: str
    options: Optional[Dict[str, Any]] = {}

class ScanResponse(BaseModel):
    module: str
    target: str
    status: str
    results: Dict[str, Any]
    execution_time: float

# Junior Pentest Routes

@router.get("/modules")
async def get_available_modules():
    """Get list of available web security testing modules"""
    modules = [
        {
            "id": "app_walker",
            "name": "Walking An Application",
            "description": "Systematically explore and map web application structure",
            "category": "reconnaissance"
        },
        {
            "id": "content_discovery",
            "name": "Content Discovery",
            "description": "Discover hidden files, directories, and endpoints",
            "category": "reconnaissance"
        },
        {
            "id": "subdomain_enum",
            "name": "Subdomain Enumeration",
            "description": "Enumerate subdomains of target domain",
            "category": "reconnaissance"
        },
        {
            "id": "auth_bypass",
            "name": "Authentication Bypass",
            "description": "Test for authentication bypass vulnerabilities",
            "category": "authentication"
        },
        {
            "id": "idor",
            "name": "IDOR (Insecure Direct Object Reference)",
            "description": "Test for IDOR vulnerabilities",
            "category": "authorization"
        },
        {
            "id": "file_inclusion",
            "name": "File Inclusion",
            "description": "Test for Local and Remote File Inclusion vulnerabilities",
            "category": "injection"
        },
        {
            "id": "ssrf",
            "name": "Server-Side Request Forgery (SSRF)",
            "description": "Test for SSRF vulnerabilities",
            "category": "injection"
        },
        {
            "id": "xss",
            "name": "Cross-site Scripting (XSS)",
            "description": "Test for XSS vulnerabilities",
            "category": "injection"
        },
        {
            "id": "race_conditions",
            "name": "Race Conditions",
            "description": "Test for race condition vulnerabilities",
            "category": "logic"
        },
        {
            "id": "command_injection",
            "name": "Command Injection",
            "description": "Test for command injection vulnerabilities",
            "category": "injection"
        },
        {
            "id": "sql_injection",
            "name": "SQL Injection",
            "description": "Test for SQL injection vulnerabilities",
            "category": "injection"
        }
    ]
    return {"modules": modules}

@router.post("/scan/app-walker")
async def scan_application_walker(request: ScanRequest):
    """Perform application walking/mapping"""
    try:
        scanner = ApplicationWalker()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="app_walker",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/content-discovery")
async def scan_content_discovery(request: ScanRequest):
    """Perform content discovery scan"""
    try:
        scanner = ContentDiscovery()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="content_discovery",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/subdomain-enum")
async def scan_subdomain_enumeration(request: ScanRequest):
    """Perform subdomain enumeration"""
    try:
        scanner = SubdomainEnumerator()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="subdomain_enum",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/auth-bypass")
async def scan_auth_bypass(request: ScanRequest):
    """Test for authentication bypass vulnerabilities"""
    try:
        scanner = AuthBypass()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="auth_bypass",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/idor")
async def scan_idor(request: ScanRequest):
    """Test for IDOR vulnerabilities"""
    try:
        scanner = IDORDetector()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="idor",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/file-inclusion")
async def scan_file_inclusion(request: ScanRequest):
    """Test for file inclusion vulnerabilities"""
    try:
        scanner = FileInclusionScanner()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="file_inclusion",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/ssrf")
async def scan_ssrf(request: ScanRequest):
    """Test for SSRF vulnerabilities"""
    try:
        scanner = SSRFDetector()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="ssrf",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/xss")
async def scan_xss(request: ScanRequest):
    """Test for XSS vulnerabilities"""
    try:
        scanner = XSSScanner()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="xss",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/race-conditions")
async def scan_race_conditions(request: ScanRequest):
    """Test for race condition vulnerabilities"""
    try:
        scanner = RaceConditionTester()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="race_conditions",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/command-injection")
async def scan_command_injection(request: ScanRequest):
    """Test for command injection vulnerabilities"""
    try:
        scanner = CommandInjectionTester()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="command_injection",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan/sql-injection")
async def scan_sql_injection(request: ScanRequest):
    """Test for SQL injection vulnerabilities"""
    try:
        scanner = SQLInjectionScanner()
        results = await scanner.scan(request.target, request.options)
        return ScanResponse(
            module="sql_injection",
            target=request.target,
            status="completed",
            results=results,
            execution_time=results.get("execution_time", 0)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/scan/status/{scan_id}")
async def get_scan_status(scan_id: str):
    """Get status of a running scan"""
    # Implementation for tracking scan status
    return {"scan_id": scan_id, "status": "running", "progress": 75}
